// loading a function from an external dependency
const prompt = require("readline-sync").question;

const acceptableVariants = {
  rock: ["rock", "Rock", "r", "R"],
  paper: ["paper", "Paper", "p", "P"],
  scissors: ["scissors", "Scissors", "s", "S"],
  lizard: ["lizard", "Lizard", "l", "L"],
  spock: ["spock", "Spock"],
};

function asStandardChoice(inputStr) {
  /** An nested array: array of array of strings */
  // array containing the 5 arrays outlined in acceptableVariants
  const arrayOfVariantArrays = Object.values(acceptableVariants);

  // alternative `for ... of ...` loop syntax - great for arrays
  // searches arrays for inputStr (which could be r, paper, Scissors) - if one array
  // includes one of these, it returns "rock" "paper" or "scissors" in all lower case
  for (let variantArray of arrayOfVariantArrays) {
    if (variantArray.includes(inputStr)) {
      return variantArray[0];
    }
  }
}
// prints the message generated by makeResultMessage
function declareWinner(userPick, computerPick) {
  const resultMessage = makeResultMessage(userPick, computerPick);
  console.log(resultMessage);
}

/**
 * Check if the first choice beats the second choice
 */
function isWinningChoice(firstChoice, secondChoice) {
  const weaknesses = {
    rock: ["paper", "spock"],
    paper: ["scissors", "lizard"],
    scissors: ["rock", "spock"],
    lizard: ["rock", "scissors"],
    spock: ["lizard", "paper"],

  };
    return weaknesses[secondChoice].includes(firstChoice);
  }
  // return weaknesses[secondChoice] === firstChoice;

// the above will return either true or false


// prompts user to choose r/p/s and standardises any given response to "rock" "paper" or "scissors"
//  this standardisation happens in the asStandardChoice function
function getUserChoice() {
  while (true) {
    const answer = prompt("Your choice: rock, paper, scissors, lizard, or spock? \n> ");
    const standardisedChoice = asStandardChoice(answer);
    if (standardisedChoice) {
      // if choice can be standardised, we can exit out of the while loop with a return of the standardisd choice
      return standardisedChoice;
    } else {
      // otherwise, log a helpful message and continue the while loop
      console.log(
        "Sorry, I don't recognise that as a choice! \nPlease try 'rock', 'paper' or 'scissors' (without quotation marks)."
      );
    }
  }
}
// generate a win/lose/tie message depending on what the user and computer's respective choices are
function makeResultMessage(userChoice, computerChoice) {
  if (userChoice === computerChoice) {
    return `You both chose ${computerChoice} - it's a draw!`;
  } else if (isWinningChoice(userChoice, computerChoice)) {
    return `Your ${userChoice} beat the computer's ${computerChoice}! You are a mighty champion!`;
  } else {
    return `The computer's ${computerChoice} beat your ${userChoice}! Bad luck...`;
  }
}

function playRound() {
  console.log("I am calling playRound")
  const computerChoice = randomPick();
  const userChoice = getUserChoice();
  declareWinner(userChoice, computerChoice);
  if (userChoice === computerChoice) {
    return true
  } else {
    return false
  }
  
}

function randomPick() {
  return "rock"
  const choiceOptions = Object.keys(acceptableVariants);
  // math.random returns a random number (always lower than 1) and math.floor turns it into a whole number
  // in this case a random integer from 0 to 2 will be returned
  const randomIndex = Math.floor(Math.random() * choiceOptions.length);
  // depending on the integer, computerChoice will return rock paper or scissors. 
  // e.g. choiceOptions[0] would evaluate to rock.
  const computerChoice = choiceOptions[randomIndex];
  return computerChoice;
}

let noDecisiveWinner = true
while (noDecisiveWinner == true) {
  console.log(noDecisiveWinner, "line 105")
  noDecisiveWinner = playRound()
  console.log(noDecisiveWinner)
}


console.log("the end")

module.exports = {
  asStandardChoice,
  isWinningChoice,
  makeResultMessage,
  playRound,
};
